{"ts":1369742529334,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"package com.mb.stats.feature.spec\n\nimport com.mb.stats.feature.fixture.TeamFixture\nimport com.mb.stats.feature.fixture.TeamsFixture\nimport com.mb.stats.feature.page.TeamPage\nimport com.mb.stats.feature.page.TeamsPage\nimport com.mb.stats.feature.spec.base.ApiSpec\nimport spock.lang.Unroll\n\nclass TeamsPageSpec extends ApiSpec {\n\n    TeamsFixture teamsFixture = new TeamsFixture()\n    TeamFixture teamFixture = new TeamFixture()\n\n    def defaultQuery = [offset: 0, limit: 50, sort: 'rank', order: 'desc']\n\n    def 'user is shown teams page'() {\n\n        given:\n        def teamsList = buildTeamsFixturesFor(defaultQuery)\n\n        when:\n        to TeamsPage\n\n        then:\n        at TeamsPage\n\n        and:\n        navbar.hasCorrectHeading()\n        subnavbar.hasCorrectNumberOfLinks()\n        subnavbar.isActive('Home')\n        footer.isValidCopyright()\n\n        and:\n        teams.title == 'Teams'\n        teams.rows.size() == teamsList.results.size()\n        teams.hasCorrectHeadings()\n        teams.rows*.hasCorrectColumns()\n        teams.containsTeams(teamsList.results)\n\n        and: 'validate pagination'\n        teams.pagination.pages.size() == 8\n        teams.pagination.pages*.text() == [\"1\", \"2\", \"3\", \"4\", \"5\", \"..\", \"20\", \"Forward\"]\n        !teams.pagination.prevLink.displayed\n        teams.pagination.nextLink.displayed\n\n    }\n\n    @Unroll\n    def \"user can sort table by #requestedSort\"() {\n\n        given:\n        def initialQuery = [offset: 0, limit: 50, sort: 'rank', order: 'desc']\n        buildTeamsFixturesFor(initialQuery)\n\n        when:\n        to TeamsPage, initialQuery\n\n        then:\n        at TeamsPage\n\n        when:\n        def teamsList = buildTeamsFixturesFor(offset: 0, limit: 50, sort: requestedSort, order: 'desc')\n\n        and:\n        teams.\"${requestedSort}\".click()\n\n        then:\n        teams.rows.size() == teamsList.results.size()\n        teams.containsTeams(teamsList.results)\n\n        where:\n        requestedSort << [\n                'teamId',\n                'alias',\n                'ptsDelta',\n                'ptsDay',\n                'ptsWeek',\n                'ptsTotal',\n                'wuTotal',\n        ]\n    }\n\n    @Unroll\n    def \"user can order table by #requestedSort\"() {\n\n        given:\n        def initialQuery = [offset: 0, limit: 50, sort: requestedSort, order: 'desc']\n        buildTeamsFixturesFor(initialQuery)\n\n        when:\n        to TeamsPage, initialQuery\n\n        then:\n        at TeamsPage\n\n        when:\n        def teamsList = buildTeamsFixturesFor(offset: 0, limit: 50, sort: requestedSort, order: 'asc')\n\n        and:\n        teams.\"${requestedSort}\".click()\n\n        then:\n        teams.rows.size() == teamsList.results.size()\n        teams.containsTeams(teamsList.results)\n\n        where:\n        requestedSort << [\n                'rank',\n                'teamId',\n                'alias',\n                'ptsDelta',\n                'ptsDay',\n                'ptsWeek',\n                'ptsTotal',\n                'wuTotal',\n        ]\n    }\n\n    @Unroll\n    def \"user can paginate through pages\"() {\n\n        given:\n        buildTeamsFixturesFor(defaultQuery)\n\n        when:\n        to TeamsPage\n\n        then:\n        at TeamsPage\n\n        and:\n        teams.pagination.activePage.text() == '1'\n\n        when:\n        buildTeamsFixturesFor([offset: 50, limit: 50, sort: 'rank', order: 'desc'])\n\n        and:\n        teams.pagination.nextLink.click()\n\n        then:\n        teams.pagination.activePage.text() == '2'\n\n\n        when:\n        buildTeamsFixturesFor(defaultQuery)\n\n        and:\n        teams.pagination.prevLink.click()\n\n        then:\n        teams.pagination.activePage.text() == '1'\n    }\n\n    def 'user can navigate to team'() {\n\n        given:\n        def teamsList = buildTeamsFixturesFor(defaultQuery)\n\n        when:\n        to TeamsPage\n\n        then:\n        at TeamsPage\n\n        and:\n        String teamId = teams.rows[0].teamId.text()\n\n        when:\n        buildTeamFixtureFor(teamId)\n\n        and:\n        teams.rows[0].alias.click()\n\n        then:\n        at TeamPage\n\n        and:\n        titleContains(teamId)\n    }\n\n\n    def buildTeamsFixturesFor(Map query) {\n\n        def teamsList = teamsFixture.forQuery(query)\n\n        imposterRemote.reset()\n        imposterRemote.configure(\n                teamsFixture.get(query),\n                teamsFixture.andRespondWith(teamsList))\n\n        teamsList\n    }\n\n    def buildTeamFixtureFor(def teamId){\n\n        def team = teamFixture.forQuery(teamId)\n\n        imposterRemote.reset()\n        imposterRemote.configure(\n                teamFixture.get(teamId),\n                teamFixture.andRespondWith(team))\n\n        team\n    }\n}"]],"start1":0,"start2":0,"length1":0,"length2":4682}]],"length":4682}
